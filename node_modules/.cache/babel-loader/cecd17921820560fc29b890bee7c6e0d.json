{"ast":null,"code":"var _jsxFileName = \"/Users/monochrome/Documents/reactmaster/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"line\",\n      series: [{\n        name: \"Price\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.close)\n      }],\n      options: {\n        chart: {\n          height: 500,\n          width: 500,\n          toolbar: {\n            show: false\n          }\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 4\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false\n          }\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"blue\"],\n            stops: [0, 100]\n          }\n        },\n        colors: [\"red\"],\n        tooltip: {\n          y: {\n            formatter: value => `$ ${value.toFixed(3).toString}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/monochrome/Documents/reactmaster/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ApexChart","Chart","coinId","isLoading","data","name","map","price","close","chart","height","width","toolbar","show","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","fill","type","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","toString"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAiBA,SAASC,KAAT,OAAuC;AAAA;;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AACrC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBN,QAAQ,CAAgB,CAAC,OAAD,EAAUI,MAAV,CAAhB,EAAmC,MACrEH,gBAAgB,CAACG,MAAD,CADkB,CAApC;AAGA,sBACE;AAAA,cACGC,SAAS,GACR,kBADQ,gBAGR,QAAC,SAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAE,CACN;AACEE,QAAAA,IAAI,EAAE,OADR;AAEED,QAAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAWC,KAAD,IAAWA,KAAK,CAACC,KAA3B;AAFR,OADM,CAFV;AAQE,MAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,GADH;AAELC,UAAAA,KAAK,EAAE,GAFF;AAGLC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAHJ,SADA;AAMPC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE,QAAT;AAAmBJ,UAAAA,KAAK,EAAE;AAA1B,SAND;AAOPK,QAAAA,KAAK,EAAE;AACLH,UAAAA,IAAI,EAAE;AADD,SAPA;AAUPI,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE;AAAEL,YAAAA,IAAI,EAAE;AAAR,WADP;AAELM,UAAAA,SAAS,EAAE;AAAEN,YAAAA,IAAI,EAAE;AAAR,WAFN;AAGLO,UAAAA,MAAM,EAAE;AAAEP,YAAAA,IAAI,EAAE;AAAR;AAHH,SAVA;AAePQ,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,UADF;AAEJC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,gBAAgB,EAAE,CAAC,MAAD,CAApB;AAA8BC,YAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,GAAJ;AAArC;AAFN,SAfC;AAmBPC,QAAAA,MAAM,EAAE,CAAC,KAAD,CAnBD;AAoBPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,CAAC,EAAE;AACDC,YAAAA,SAAS,EAAGC,KAAD,IAAY,KAAIA,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,QAAS;AADpD;AADI;AApBF;AARX;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD;;GA/CQ/B,K;UACqBH,Q;;;KADrBG,K;AAiDT,eAAeA,KAAf","sourcesContent":["import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\n\ninterface IHistorical {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"line\"\n          series={[\n            {\n              name: \"Price\",\n              data: data?.map((price) => price.close) as unknown as number[],\n            },\n          ]}\n          options={{\n            chart: {\n              height: 500,\n              width: 500,\n              toolbar: { show: false },\n            },\n            stroke: { curve: \"smooth\", width: 4 },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              labels: { show: false },\n            },\n            fill: {\n              type: \"gradient\",\n              gradient: { gradientToColors: [\"blue\"], stops: [0, 100] },\n            },\n            colors: [\"red\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(3).toString}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}